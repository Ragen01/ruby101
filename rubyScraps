user_input.gets.chomp
user_input.gsub!(/s/,"th")

if user_input.include? "s"
  user_input.gsub!(/s/, "th")
else
  puts "Nothing to do here!"
end


user_input = gets.chomp

print "Thtring, pleathe!: "
user_input = gets.chomp
user_input.downcase!
if user_input.include? "s"
    print "mmm"
else
    print "nonono"
end

user_input.gsub!(/s/, "th")

i = 20
loop do
  i -= 1
  print "#{i}"
  break if i <= 0
end

i = 20
loop do
  i -= 1
  next if i%2 != 0
  print "#{i}"
  break if i <= 0
end

my_array = [1,2,3,4,5]

You can also use the do keyword instead of {}:

The variable name between | | can be anything you like: it's just a placeholder for each element of the object you're using .each on.

odds = [1,3,5,7,9]

# Add your code below!
odds.each do |x|
    print "#{x*2}"
end

5.times {print "I AM GOOD!"}

i = 1
until i == 51 do
    print i
    i+=1
end

i = 1
for i in 1..50
    print i
    i+=1
end

ss = 1
loop do
    s = "Ruby!"
    print s
    ss += 1
    break if ss == 31
end

30.times {print "Ruby!"}

puts "your input?"
text = gets.chomp

puts "redact?"
redact = gets.chomp

words = text.split

puts "your input?"
text = gets.chomp

puts "redact?"
redact = gets.chomp

words = text.split
words.each do |x|
    print x
end

puts "your input?"
text = gets.chomp

puts "redact?"
redact = gets.chomp

words = text.split
words.each do |x|
   if x == redact
    print "REDACTED "
   else
       print x + " "
   end
end

my_2d_array = [[4,5,8], [8,9,0]]

my_hash = { "name" => "Eric",
  "age" => 26,
  "hungry?" => true
}

puts my_hash["name"]
puts my_hash["age"]
puts my_hash["hungry?"]

pets = Hash.new

pets = Hash.new
pets["mmm"] = "cat" 

pets = {
  "Stevie" => "cat",
  "Bowser" => "hamster",
  "Kevin Sorbo" => "fish"
}

puts pets["Stevie"]
# will print "cat"

pets = Hash.new
pets["mmm"] = "cat" 
puts pets["mmm"]

friends = ["Milhouse", "Ralph", "Nelson", "Otto"]

family = { "Homer" => "dad",
  "Marge" => "mom",
  "Lisa" => "sister",
  "Maggie" => "sister",
  "Abe" => "grandpa",
  "Santa's Little Helper" => "dog"
}

friends.each { |x| puts "#{x}" }
family.each { |x, y| puts "#{x}: #{y}" }

languages = ["HTML", "CSS", "JavaScript", "Python", "Ruby"]
languages.each { |element| puts element }

s = [["ham", "swiss"], ["turkey", "cheddar"], ["roast beef", "gruyere"]]

s.each do |sub_array| 
    sub_array.each do |l|
        puts l
    end
end


secret_identities = {
  "The Batman" => "Bruce Wayne",
  "Superman" => "Clark Kent",
  "Wonder Woman" => "Diana Prince",
  "Freakazoid" => "Dexter Douglas"
}
  
secret_identities.each do |name, name2|
    puts "#{name}: #{name2}"
end


my_hash = {
    "num1" => 1
}


lunch_order = {
  "Ryan" => "wonton soup",
  "Eric" => "hamburger",
  "Jimmy" => "sandwich",
  "Sasha" => "salad",
  "Cole" => "taco"
}

lunch_order.each do |l, v|
    puts "#{v}"
end


puts "txt?"
text = gets.chomp
words = text.split


frequencies = Hash.new{0}

puts "Text please: "
text = gets.chomp

words = text.split(" ")
frequencies = Hash.new(0)
words.each { |word| frequencies[word] += 1 }
frequencies = frequencies.sort_by {|a, b| b }
frequencies.reverse!
frequencies.each { |word, frequency| puts word + " " + frequency.to_s }


puts "txt?"
text = gets.chomp

words = text.split (" ")
frequencies = Hash.new (0)

words.each {|word| frequencies [word] += 1}


puts "txt?"
text = gets.chomp

words = text.split (" ")
frequencies = Hash.new (0)

words.each {|word| frequencies [word] += 1}

frequencies = frequencies.sort_by do |word, count|
    count
end
frequencies.reverse!


puts "txt?"
text = gets.chomp

words = text.split (" ")
frequencies = Hash.new (0)

words.each {|word| frequencies [word] += 1}

frequencies = frequencies.sort_by do |word, count|
    count
end
frequencies.reverse!

frequencies.each do |word, count|
    puts word + " " + count.to_s
end


def greeting
    puts "hello hello"
end

def array_of_10
  puts (1..10).to_a
end

array_of_10


def greeter (name)
    return "hi..."+ name
end

def by_three? (n)
    return n % 3 == 0
end


# method that capitalizes a word
def capitalize(string) 
  puts "#{string[0].upcase}#{string[1..-1]}"
end

capitalize("ryan") # prints "Ryan"
capitalize("jane") # prints "Jane"

# block that capitalizes each string in the array
["ryan", "jane"].each {|string| puts "#{string[0].upcase}#{string[1..-1]}"} # prints "Ryan", then "Jane"


my_array = [3, 4, 8, 7, 1, 6, 5, 9, 2]
my_array.sort!


# library sorting code
books = ["Charlie and the Chocolate Factory", "War and Peace", "Utopia", "A Brief History of Time", "A Wrinkle in Time"]

books.sort!


book_1 = "A Wrinkle in Time"

book_2 = "A Brief History of Time"

book_1 <=> book_2


books = ["Charlie and the Chocolate Factory", "War and Peace", "Utopia", "A Brief History of Time", "A Wrinkle in Time"]

# To sort our books in ascending order, in-place
books.sort! { |firstBook, secondBook| firstBook <=> secondBook }

# Sort your books in descending order, in-place below


books.reverse! { |firstBook, secondBook| firstBook <=> secondBook }


fruits = ["orange", "apple", "banana", "pear", "grapes"]
fruits.sort!.reverse! do |a, b|
    a <=> b
end


def alphabetize (arr, rev=false)
    return arr.sort!
end

numbers = [6, 3, 2, 0]
p = alphabetize(numbers, false)
puts "#{p}"


def alphabetize (arr, rev)
    return arr.sort!
    if rev == true
        return arr.reverse!
    end
end

numbers = [6, 3, 2, 0]
p = alphabetize(numbers, false)
puts "#{p}"


matz = { "First name" => "Yukihiro",
  "Last name" => "Matsumoto",
  "Age" => 47,
  "Nationality" => "Japanese",
  "Nickname" => "Matz"
}
mats.each do |k, v|
    puts v, mats[v]
end


matz = { "First name" => "Yukihiro",
  "Last name" => "Matsumoto",
  "Age" => 47,
  "Nationality" => "Japanese",
  "Nickname" => "Matz"
}
matz.each do |k, v|
    puts v, matz[v]
end


no_nil_hash = Hash.new("rady Blix")


symbol_hash = {
  :one => 1,
  :two => 2,    # Fill in these two blanks!
  :three => 3,
}


strings = ["HTML", "CSS", "JavaScript", "Python", "Ruby"]

# Add your code below!
symbols = []
strings.each do |s|
    s.to_sym
    symbols.push(s.to_sym)
end


strings = ["HTML", "CSS", "JavaScript", "Python", "Ruby"]

# Add your code below!
symbols = []
strings.each do |s|
    s.to_sym
    symbols.push(s.intern)
end


movies = {
    :asd => "good",
    :dfg => "not good"
}


movies = {
    asd: "good",
    dfg: "not good"
}


(ruby):12: syntax error, unexpected '\n', expecting tASSOC
(ruby):13: syntax error, unexpected '|', expecting '='
{|m,rating| rating > 3} }
           ^
(ruby):13: syntax error, unexpected '}', expecting $end
{|m,rating| rating > 3} }




# Add your code below!
movie_ratings.each_key {|j| puts j, " "}


movies = {
  Memento: 3,
  Primer: 4,
  Ishtar: 1
}

puts "What would you like to do?"
puts "-- Type 'add' to add a movie."a
puts "-- Type 'update' to update a movie."
puts "-- Type 'display' to display all movies."
puts "-- Type 'delete' to delete a movie."

choice = gets.chomp.downcase
case choice
when 'add'
  puts "What movie do you want to add?"
  title = gets.chomp
  if movies[title.to_sym].nil?
    puts "What's the rating? (Type a number 0 to 4.)"
    rating = gets.chomp
    movies[title.to_sym] = rating.to_i
    puts "#{title} has been added with a rating of #{rating}."
  else
    puts "That movie already exists! Its rating is #{movies[title.to_sym]}."
  end
when 'update'
  puts "What movie do you want to update?"
  title = gets.chomp
  if movies[title.to_sym].nil?
    puts "Movie not found!"
  else
    puts "What's the new rating? (Type a number 0 to 4.)"
    rating = gets.chomp
    movies[title.to_sym] = rating.to_i
    puts "#{title} has been updated with new rating of #{rating}."
  end
when 'display'
  movies.each do |movie, rating|
    puts "#{movie}: #{rating}"
  end
when 'delete'
  puts "What movie do you want to delete?"
  title = gets.chomp
  if movies[title.to_sym].nil?
    puts "Movie not found!"
  else
    movies.delete(title.to_sym)
    puts "#{title} has been removed."
  end
else
  puts "Sorry, I didn't understand you."
end


movies = {
    'o' => 8    
}
puts "n?"
choice = gets.chomp


movies = {
    'o' => 8    
}
puts "n?"
choice = gets.chomp




movies = {
    'o' => 8    
}
puts "n?"
choice = gets.chomp
case choice
when "add"
     puts "Added!"
when "update"
     puts "Updated!"
when "display"
     puts "Movies!"
when "delete"
    puts "Deleted!"
else
    puts "Error!"
end


===================              
movies = {
    'o' => 8    
}
puts "n?"
choice = gets.chomp
case choice
when "add"
     puts "title?"
     title = gets.chomp
when "update"
     puts "rating?"
     rating = gets.chomp
when "display"
movies = {}
movies[title] = rating
     puts "Movie #{title} with rating #{rating}!"
when "delete"
    puts "Deleted!"
else
    puts "Error!"
end

======================================


movies = {
    'o' => 8    
}
puts "n?"
choice = gets.chomp
case choice
when "add"
     puts "title?"
     title = gets.chomp
when "update"
     puts "rating?"
     rating = gets.chomp
when "display"
movies = {}
movies[title] = rating
     puts "Movie #a{title} with rating #{rating}!"
when "delete"
    puts "Deleted!"
else
    puts "Error!"
end

==========================================


movies = {
    'o' => 8    
}
puts "n?"
choice = gets.chomp
case choice
when "add"
     puts "title?"
     title = gets.chomp
     puts "rating?"
     rating = gets.chomp
when "update"
     puts "rating?"
     rating = gets.chomp
when "display"
movies = {}
movies.merge!(title; , rating)
     puts "Movie #a{title} with rating #{rating}!"
when "delete"
    puts "Deleted!"
else
    puts "Error!"
end

======================================


movies = {
    'o' => 8    
}
puts "n?"
choice = gets.chomp
case choice
when "add"
     puts "title?"
     title = gets.chomp

when "update"
     puts "rating?"
     rating = gets.chomp
when "display"
movies = {}
movies.merge!(title; , rating)
     puts "Movie #a{title} with rating #{rating}!"
when "delete"
    puts "Deleted!"
else
    puts "Error!"
end

============================================



movies = {
    'o' => 8    
}
puts "n?"
choice = gets.chomp
case choice
when "add"
     puts "title?"
     title = gets.chomp

when "update"
     puts "rating?"
     rating = gets.chomp
when "display"

movies[title] = rating
     puts "Movie #a{title} with rating #{rating}!"
when "delete"
    puts "Deleted!"
else
    puts "Error!"
end

==============================================


movies = {
    'o' => 8    
}
puts "n?"
choice = gets.chomp
case choice
when "add"
     puts "title?"
     title = gets.chomp

when "update"
     puts "rating?"
     rating = gets.chomp
when "display"

     puts "Movie #a{title} with rating #{rating}!"

movies[title] = rating
end

================================================


movies = {
    'o' => 8    
}
puts "n?"
choice = gets.chomp
case choice
when "add"
     puts "title?"
     title = gets.chomp

when "update"
     puts "rating?"
     rating = gets.chomp
when "display"

     puts "Movie #a{title} with rating #{rating}!"

movies[title] = rating
end

========================================================
==============================================================

movies = {
    "o" => 8,
    "m" => 6
}
puts "n?"
choice = gets.chomp
case choice
when "add"
     puts "title?"
     title = gets.chomp

     puts "rating?"
     rating = gets.chomp
     movies[title] = rating
     puts "Movie !"
when "update"
     puts "Updated!"
when "display"
     puts "Movies!"
when "delete"
    puts "Deleted!"
else
    puts "Error!"
end

====================================================================
==================================================================


movies = {
    "o" => 8,
    "m" => 6
}
puts "n?"
choice = gets.chomp
case choice
when "add"
     puts "title?"
     title = gets.chomp

     puts "rating?"
     rating = gets.chomp
     movies[title.to_sym] = rating.to_i
     puts "Movie !"
when "update"
     puts "Updated!"
when "display"
     puts "Movies!"
when "delete"
    puts "Deleted!"
else
    puts "Error!"
end

=================================================================


movies = {
    "o" => 8,
    "m" => 6
}
puts "n?"
choice = gets.chomp
case choice
when "add"
     puts "title?"
     title = gets.chomp

     puts "rating?"
     rating = gets.chomp
     if (movies[title.to_sym]).nil?
         movies[title.to_sym] = rating .o_i
     else
        puts "Movie !"
     end
when "update"
     puts "Updated!"
when "display"
     puts "Movies!"
when "delete"
    puts "Deleted!"
else
    puts "Error!"
end

=========================================================

movies = {
    "o" => 8,
    "m" => 6
}
puts "n?"
choice = gets.chomp
case choice
when "add"
     puts "title?"
     title = gets.chomp

     puts "rating?"
     rating = gets.chomp
     if (movies[title.to_sym]).nil?
         movies[title.to_sym] = rating .o_i
     else
        puts "Movie !"
     end
when "update"
     puts "title?"
     title = gets.chomp
     if (movies[title.to_sym]).nil?
        puts "no Updated!"
 else
     puts "rating?"
     rating2 = gets.chomp 
     movies[title.to_sym] = rating2 .o_i
end
     
when "display"
     puts "Movies!"
when "delete"
    puts "Deleted!"
else
    puts "Error!"
end


============================================================

movies = {
    "o" => 8,
    "m" => 6
}
puts "n?"
choice = gets.chomp
case choice
when "add"
     puts "title?"
     title = gets.chomp

     puts "rating?"
     rating = gets.chomp
     if (movies[title.to_sym]).nil?
         movies[title.to_sym] = rating .o_i
     else
        puts "Movie !"
     end
when "update"
     puts "title?"
     title = gets.chomp
     if (movies[title.to_sym]).nil?
        puts "no Updated!"
 else
     puts "rating?"
     rating2 = gets.chomp 
     movies[title.to_sym] = rating2 .o_i
end
     
when "display"
    # puts "Movies!"
    movies.each do |a, b|
        puts "#{a}: #{b}"
    end
when "delete"
    puts "Deleted!"
else
    puts "Error!"
end


========================================================

movies = {
    "o" => 8,
    "m" => 6
}
puts "n?"
choice = gets.chomp
case choice
when "add"
     puts "title?"
     title = gets.chomp

     puts "rating?"
     rating = gets.chomp
     if (movies[title.to_sym]).nil?
         movies[title.to_sym] = rating .o_i
     else
        puts "Movie !"
     end
when "update"
     puts "title?"
     title = gets.chomp
     if (movies[title.to_sym]).nil?
        puts "no Updated!"
 else
     puts "rating?"
     rating2 = gets.chomp 
     movies[title.to_sym] = rating2 .o_i
end
     
when "display"
    # puts "Movies!"
    movies.each do |a, b|
        puts "#{a}: #{b}"
    end
when "delete"
    puts "del0-title?"
    title0 = gets.chomp 
     if (movies[title.to_sym]).nil?
         movies[title.to_sym] = rating .o_i
     else
        puts "Movie !"
     end
   #movies.delete(title)!
   # puts "Deleted!"
else
    puts "Error!"
end


..................................................................................................................................

movies = {
    "o" => 8,
    "m" => 6
}
puts "n?"
choice = gets.chomp
case choice
when "add"
     puts "title?"
     title = gets.chomp

     puts "rating?"
     rating = gets.chomp
     if (movies[title.to_sym]).nil?
         movies[title.to_sym] = rating .o_i
     else
        puts "Movie !"
     end
when "update"
     puts "title?"
     title = gets.chomp
     if (movies[title.to_sym]).nil?
        puts "no Updated!"
 else
     puts "rating?"
     rating2 = gets.chomp 
     movies[title.to_sym] = rating2 .o_i
end
     
when "display"
    # puts "Movies!"
    movies.each do |a, b|
        puts "#{a}: #{b}"
    end
when "delete"
    puts "del0-title?"
    title0 = gets.chomp 
       if (movies[title.to_sym]).nil?
			  puts "nothing to Delete"
     else
        movies.delete(title0)! 
		puts "Deleted!"
     end
   
   # puts "Deleted!"
else
    puts "Error!"
end

=================================================


movies = {
    "o" => 8,
    "m" => 6
}
puts "n?"
choice = gets.chomp
case choice
when "add"
     puts "title?"
     title = gets.chomp

     puts "rating?"
     rating = gets.chomp
     if (movies[title.to_sym]).nil?
         movies[title.to_sym] = rating .o_i
     else
        puts "Movie !"
     end
when "update"
     puts "title?"
     title = gets.chomp
     if (movies[title.to_sym]).nil?
        puts "no Updated!"
 else
     puts "rating?"
     rating2 = gets.chomp 
     movies[title.to_sym] = rating2 .o_i
end
     
when "display"
    # puts "Movies!"
    movies.each do |a, b|
        puts "#{a}: #{b}"
    end
when "delete"
    puts "del0-title?"
    title = gets.chomp 
       if (movies[title.to_sym]).nil?
			  puts "nothing to Delete"
     else
        movies.delete(title.to_sym) 
		puts "Deleted!"
     end
   
   # puts "Deleted!"
else
    puts "Error!"
end


==================================================================
==================================================================

# Type your Ruby code below!
puts "im rezlly.." unless true


# Type your Ruby code below!
puts 8<7 ? "t": "f"


puts "Hello there!"
greeting = gets.chomp

# Add your case statement below!
case greeting
  when "English" then puts "Hello!"
  when "French" then puts "Bonjour!"
  when "German" then puts "Guten Tag!"
  when "Finnish" then puts "Haloo!"
  else puts "I don't know that language!"
end


# Write your code on line 2!
# Write your code on line 2!
favorite_language = nil
favorite_language ||= "java"
puts favorite_language


=====================================
=====================================

my_array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].each {|x| if x % 2 == 0: puts "even" }


=======================================
=======================================

# Write your code below!
"L".upto ("P") { |l| puts l }


age = 26

# Add your code below!
age.respond_to? (:next)


alphabet = ["a", "b", "c"]
alphabet << ("d") # Update me!

caption = "A giraffe surrounded by "
caption << "weezards!" # Me, too!

......................................................................................................

favorite_things = ["Ruby", "espresso", "candy"]

puts "A few of my favorite things:"

favorite_things.each do |thing|
  puts "I love #{thing}!"
end

........................................................................................................

puts "One is less than two!" if 1 < 2 

......................................................................................................

 puts 1 < 2 ? "One is less than two!" :
    "One is not less than two."

	......................................................................................................
	
puts "What's your favorite language?"
language = gets.chomp

case language
when "Ruby"
  puts "Ruby is great for web apps!"
when "Python"
  puts "Python is great for science."
when "JavaScript"
  puts "JavaScript makes websites awesome."
when "HTML"
  puts "HTML is what websites are made of!"
when "CSS"
  puts "CSS makes websites pretty."
else
  puts "I don't know that language!"
end

..................................................................................................................

favorite_animal ||= "m"...............Conditional Assignment

.........................................................................................................................

def square (n)
    n*n
end
................................................................................................................

3.times do
  puts "I'm a refactoring master!"
end

..........................................................................................................

 prime_array ||= [] 
 
 =======================
 ============================
 
 return "n must be an integer." unless n.is_a? Integer
    
return "n must be greater than 0." if n <= 0

========================================
========================================

 n.times do 
    prime_array.push(prime.next)
  end
  
  =============================================
  ===============================================
  
   prime = Prime.instance
  prime.first n
  
  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
  
  # Write your code below!
5.times do puts "I'm a block!"
end

=======================================

fibs = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]

# Add your code below!
doubled_fibs = fibs.collect { |num| num * 2 }

=========================================

def yield_name(name)
  puts "In the method! Let's yield."
  yield("Kim")
  puts "In between the yields!"
  yield(name)
  puts "Block complete! Back in the method."
end

yield_name("Eric") { |n| puts "My name is #{n}." }

yield_name("np") { |n| puts "My name is #{n}." }


===============================================

def double(n)
    puts "mmmmmmmmmmm"
    yield
    puts "\\\\\\\\\\\\\\\\\"
end

double(9) { |l| l * 2 }


def double(n)
    
    yield(n)
    
end

double(9) { |l| l * 2 }

========================================================
]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]

Procs are easy to define! You just call Proc.new and pass in the block you want to save. 
Here's how we'd create a proc called cube that cubes a number (raises it to the third power)

cube = Proc.new { |x| x ** 3 }

[1, 2, 3].collect!(&cube)
[4, 5, 6].map!(&cube)

(The .collect! and .map! methods do the exact same thing.)
The & is used to convert the cube proc into a block 
(since .collect! and .map! normally take a block). We'll do this any time we pass a proc to a method that expects a block.

floats = [1.2, 3.45, 0.91, 7.727, 11.42, 482.911]
# Write your code below this line!

round_down = Proc.new {|floats| floats.floor}

# Write your code above this line!
ints = floats.collect(&round_down)

]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]

# Here at the amusement park, you have to be four feet tall
# or taller to ride the roller coaster. Let's use .select on
# each group to get only the ones four feet tall or taller.

group_1 = [4.1, 5.5, 3.2, 3.3, 6.1, 3.9, 4.7]
group_2 = [7.0, 3.8, 6.2, 6.1, 4.4, 4.9, 3.0]
group_3 = [5.5, 5.1, 3.9, 4.3, 4.9, 3.2, 3.2]

# Complete this as a new Proc
over_4_feet = Proc.new {|group_1| group_1  >= 4}

# Change these three so that they use your new over_4_feet Proc
can_ride_1 = group_1.select { |height| height >= 4 }
can_ride_2 = group_2.select { |height| height >= 4 }
can_ride_3 = group_3.select { |height| height >= 4 }

]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]

def greeter
    yield 
end

phrase = Proc.new do puts "Hello there!" end
greeter(&phrase)

]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]

hi = Proc.new do puts "Hello!" end
hi.call

\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

numbers_array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

strings_array = numbers_array.map(&:to_s)

]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]

lambda { |param| block }

strings = ["leonardo", "donatello", "raphael", "michaelangelo"]
# Write your code below this line!

symbolize = lambda {|strings| strings.to_sym}

# Write your code above this line!
symbols = strings.collect(&symbolize)

]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]

:hello.is_a? Symbol
# ==> true
////////////////////////////////////////

my_array = ["raindrops", :kettles, "whiskers", :mittens, :packages]

# Add your code below!
symbol_filter = lambda { |x| x.is_a? Symbol }
symbols = my_array.select(&symbol_filter)

]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]

A block is just a bit of code between do..end or {}. It's not an object on its own, but it can be passed to methods like .each or .select.
A proc is a saved block we can use over and over.
A lambda is just like a proc, only it cares about the number of arguments it gets and it returns to its calling method rather than returning immediately.

]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]

odds_n_ends = [:weezard, 42, "Trady Blix", 3, true, 19, 12.345]

ints = odds_n_ends.select{|x| x.is_a? Integer} 

[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[

ages = [23, 101, 7, 104, 11, 94, 100, 121, 101, 70, 44]

# Add your code below!
under_100 = Proc.new {x<100}

]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]

ages = [23, 101, 7, 104, 11, 94, 100, 121, 101, 70, 44]

# Add your code below!
under_100 = Proc.new {|x| x<100}

youngsters = ages.select(&under_100)

]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]

crew = {
  captain: "Picard",
  first_officer: "Riker",
  lt_cdr: "Data",
  lt: "Worf",
  ensign: "Ro",
  counselor: "Troi",
  chief_engineer: "LaForge",
  doctor: "Crusher"
}
# Add your code below!
first_half = lambda {|k,v| v < "M"}

]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]

crew = {
  captain: "Picard",
  first_officer: "Riker",
  lt_cdr: "Data",
  lt: "Worf",
  ensign: "Ro",
  counselor: "Troi",
  chief_engineer: "LaForge",
  doctor: "Crusher"
}
# Add your code below!
first_half = lambda {|k,v| v < "M"}
a_to_m = crew.select(&first_half)

]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]

class Person
    
    
end
]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]

class Person
    def initialize (name)
        @name = name
        
    end 
    
end

class Person
    def initialize (name)
        @name = name
        
    end 
    
end

matz = Person.new ("Yukihiro")

]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]

class MyClass
  $my_variable = "Hello!"
end

puts $my_variable

[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[

class Person
  # Set your class variable to 0 on line 3
  @@people_count =  0
  
  def initialize(name)
    @name = name
    # Increment your class variable on line 8
     @@people_count += 1
  end
  
  def self.number_of_instances
    # Return your class variable on line 13
  return  @@people_count  
  end
end

matz = Person.new("Yukihiro")
dhh = Person.new("David")

puts "Number of Person instances: #{Person.number_of_instances}"

]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]

class SuperBadError < ApplicationError
end

]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]

class Application
  def initialize(name)
    @name = name
  end
end

# Add your code below!
class MyApp < Application
    
end

[[[[[[[[[[[[[[[[[[[[[[[[[[[[[

class Creature
  def initialize(name)
    @name = name
  end
  
  def fight
    return "Punch to the chops!"
  end
end

# Add your code below!
class Dragon < Creature
  def fight
    return "Breathes fire!"
  end
end

]]]]]]]]]]]]]]]]]]]]]]]]]]]]]

class Creature
  def initialize(name)
    @name = name
  end
  
  def fight
    return "Punch to the chops!"
  end
end

# Add your code below!
class Dragon < Creature
    def fight
      puts "Instead of breathing fire..." 
    return super
  end
end

[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[

class Message
    def initialize(from, to)
        @from = from
        @to = to
    end
end

]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]

class Message
     @@messages_sent = 0
    def initialize(from, to)
        @from = from
        @to = to
        @@messages_sent += 1
    end
end

]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]

class Message
     @@messages_sent = 0
    def initialize(from, to)
        @from = from
        @to = to
        @@messages_sent += 1
    end
end
my_message = Message.new(7,9)

[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[

class Message
     @@messages_sent = 0
    def initialize(from, to)
        @from = from
        @to = to
        @@messages_sent += 1
    end
end
my_message = Message.new(7,9)

class Email < Message
    
    def initialize(subject)
        @subject = subject
    end
end
        
]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]

class Message
     @@messages_sent = 0
    def initialize(from, to)
        @from = from
        @to = to
        @@messages_sent += 1
    end
end
my_message = Message.new(7,9)

class Email < Message
    
     def initialize(from, to)
        super
    end
end

]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]

class Computer
     
    def initialize()
    end
end

]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]

class Computer     
    def initialize(username, password)
        @username = username
        @password = password
        @files = {}
    end
end

]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]

class Computer       
        @@users = {}
    def initialize(username, password)
        @username = username
        @password = password
        @files = {}
        @@users[username] = password 
    end
end

]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]

class Computer       
        @@users = {}
    def initialize(username, password)
        @username = username
        @password = password
        @files = {}
        @@users[username] = password 
    end
    def create (filename)
        @time = Time.now
        @files[filename] = time
        puts "new file added"
    end
end

[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[

class Computer       
        @@users = {}
    def initialize(username, password)
        @username = username
        @password = password
        @files = {}
        @@users[username] = password 
    end
    def create (filename)
        @time = Time.now
        @files[filename] = time
        puts "new file added"
    end
    def Computer.get_users ()
        return @@users
    end
end

]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]

class Computer       
        @@users = {}
    def initialize(username, password)
        @username = username
        @password = password
        @files = {}
        @@users[username] = password 
    end
    def create (filename)
        @time = Time.now
        @files[filename] = time
        puts "new file added"
    end
    def Computer.get_users ()
        return @@users
    end
end
my_computer = Computer.new("11",567)

[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[

class Dog       
    def initialize(name, breed)
        @name = name
        @breed = breed
    end
end

]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]

class Dog       
    def initialize(name, breed)
        @name = name
        @breed = breed
    end
    public
    def bark
        puts "Woof!"
    end
end

////////////////////////////////////////////////////////////////////////

class Dog       
    def initialize(name, breed)
        @name = name
        @breed = breed
    end
    public
    def bark
        puts "Woof!"
    end
    private
    def id
        @id_number = 12345
    end
end

/////////////////////////////////////////////////////////////////////////////////

class Person
  attr_reader :name
  attr_writer :name
  def initialize(name)
    @name = name
  end
end

///////////////////////////////////////////////


